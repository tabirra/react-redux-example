{"version":3,"sources":["reducers/moves.js","reducers/squares.js","reducers/index.js","store/configureStore.js","components/Header.js","components/Square.js","components/Board.js","components/Move.js","components/MoveList.js","containers/Game.js","components/Root.js","index.js"],"names":["moves","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","id","text","completed","map","todo","objectSpread","squares","combineReducers","loggerMiddleware","createLogger","Header","_ref","status","react_default","a","createElement","className","Square","value","onClick","selected","number","winner","key","includes","Board","i","_this","this","components_Square","props","board","boardRow","j","push","renderSquare","printBoard","Component","Move","square","step","col","row","MoveList","list","moveList","switchOrderList","ascending","jumpTo","_loop","calculateCol","calculateRow","components_Move","_loop2","printMoveList","move","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","history","Array","fill","stepNumber","xIsNext","bind","assertThisInitialized","slice","calculateWinner","setState","order","_this2","current","winnerLine","lines","lineArr","_lines$i2","slicedToArray","b","c","calculateWinnerLine","components_Header","Board_Board","handleClick","MoveList_MoveList","_lines$i","preloadedState","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","Root","es","Game_Game","render","Root_Root","document","getElementById"],"mappings":"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","file":"static/js/main.574e1dc9.chunk.js","sourcesContent":["const moves = (state = [], action) => {\n  switch (action.type) {\n    case \"GO_TO_MOVE\":\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ];\n    case \"TOGGLE_ORDER\":\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n      );\n    default:\n      return state;\n  }\n};\n\nexport default moves;\n","/**\n * Reducer that handles the state of the squares\n * @param  {Array}  [state=[]] Current state of the game.\n * @param  {object} action     [description]\n * @return {object}            [description]\n */\nconst squares = (state = [], action) => {\n  switch (action.type) {\n    case \"SELECT_SQUARE\":\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ];\n    default:\n      return state;\n  }\n};\n\nexport default squares;\n","import { combineReducers } from \"redux\";\nimport moves from \"./moves\";\nimport squares from \"./squares\";\n\n/**\n * Root reducer for the Tic Tac Toe game.\n */\nexport default combineReducers({\n  moves,\n  squares\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport rootReducer from \"../reducers/index\";\n\n/**\n * Logger that register every action taken by the user.\n * @type {Logger}\n */\nconst loggerMiddleware = createLogger();\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Header that shows the current status of the game.\n * @param {string} status Player turn information or game status information.\n */\nconst Header = ({ status }) => <h1 className=\"header\">{status}</h1>;\n\nHeader.propTypes = {\n  status: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Component that defines a square form the board.\n * @param {char} value    Character describing the player who choose the square(O or X)\n * @param {function} onClick  Callback function to handle the user selecting the square.\n * @param {number} selected Number of the square selected by the user on the current turn [0...9]\n * @param {number} number   Number of the square on the board [0...9]\n * @param {array} winner   Collection of the number of the squares for the winning line/s.\n */\nconst Square = ({ value, onClick, selected, number, winner }) => (\n  <button\n    key={number}\n    className={\n      selected === null\n        ? \"square\"\n        : selected === number || winner.includes(number)\n        ? \"selSquare\"\n        : \"square\"\n    }\n    onClick={onClick}\n  >\n    {value}\n  </button>\n);\n\nSquare.propTypes = {\n  onClick: PropTypes.func.isRequired\n};\n\nexport default Square;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Square from \"./Square\";\n\n/**\n * Game board for Tic Tac Toe\n * @type {Object}\n */\nexport default class Board extends Component {\n  /**\n   * Function that renders the squares of the board.\n   * @param  {number} i Value of the square[0...9]\n   * @return {object}   Square component with it's values set.\n   */\n  renderSquare(i) {\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        number={i}\n        selected={this.props.selected}\n        winner={this.props.winner}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  /**\n   * Function that prints the board using a loop.\n   * @return {Array} Array containing the squares of the board.\n   */\n  printBoard() {\n    let board = [];\n    // Outer loop to create parent\n    for (let i = 0; i < 3; i++) {\n      let boardRow = [];\n      //Inner loop to create children\n      for (let j = i * 3; j < i * 3 + 3; j++) {\n        boardRow.push(this.renderSquare(j));\n      }\n      //Create the parent and add the children\n      board.push(\n        <div key={i} className=\"board-row\">\n          {boardRow}\n        </div>\n      );\n    }\n    return board;\n  }\n\n  render() {\n    return <div>{this.printBoard()}</div>;\n  }\n}\n\nBoard.propTypes = {\n  winner: PropTypes.array,\n  selected: PropTypes.number,\n  onClick: PropTypes.func.isRequired\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Move selected by a user in a previous turn.\n * @param {number} square  Number of the square selected in the move.\n * @param {number} step    Number of the turn of the game.\n * @param {number} col     Column where the square of the move is located on the board.\n * @param {number} row     Row where the square of the move is located on the board.\n * @param {func} onClick Callback function to jump to a previous state of the game.\n */\nconst Move = ({ square, step, col, row, onClick }) => (\n  <button\n    className={square === step ? \"currentMove\" : \"move\"}\n    onClick={onClick}\n  >\n    Go to move #{square} COL: {col} ROW: {row}\n  </button>\n);\n\nMove.propTypes = {\n  square: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  col: PropTypes.number.isRequired,\n  row: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nexport default Move;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Move from \"./Move\";\n\n/**\n * Button list to toggle the order of the moves made in a game, restart the game\n * or jump to a previous move of the current game.\n * @type {Object}\n */\nexport default class MoveList extends Component {\n  /**\n   * Function that prepares the moves list for rendering.\n   * @return {Array} Array containing the current list of moves for the game.\n   */\n  printMoveList() {\n    let list = [];\n    let moveList = [];\n    let desc = \"Go to game start\";\n    moveList.push(\n      <div key=\"restart_toggle\" className=\"restart_toggle\">\n        <button\n          key={-1}\n          onClick={() => this.props.switchOrderList(this.props.ascending)}\n        >\n          {\"Switch order\"}\n        </button>\n        <button key={0} onClick={() => this.props.jumpTo(0)}>\n          {desc}\n        </button>\n      </div>\n    );\n\n    if (this.props.ascending) {\n      for (let i = 1; i < this.props.step + 1; i++) {\n        let col = calculateCol(this.props.moves[i]);\n        let row = calculateRow(this.props.moves[i]);\n        moveList.push(\n          <li key={i}>\n            <Move\n              key={i}\n              square={i}\n              step={this.props.step}\n              col={col}\n              row={row}\n              onClick={() => this.props.jumpTo(i)}\n            />\n          </li>\n        );\n      }\n    } else {\n      for (let i = this.props.step; i > 0; i--) {\n        let col = calculateCol(this.props.moves[i]);\n        let row = calculateRow(this.props.moves[i]);\n        moveList.push(\n          <li key={i}>\n            <Move\n              key={i}\n              square={i}\n              step={this.props.step}\n              col={col}\n              row={row}\n              onClick={() => this.props.jumpTo(i)}\n            />\n          </li>\n        );\n      }\n    }\n\n    list.push(\n      <ol key={1} className=\"move-list\">\n        {moveList}\n      </ol>\n    );\n\n    return list;\n  }\n\n  /**\n   * [render description]\n   * @return {[type]} [description]\n   */\n  render() {\n    return <div>{this.printMoveList()}</div>;\n  }\n}\n\nMoveList.propTypes = {\n  ascending: PropTypes.bool\n};\n\n/**\n * Function that calculates the row of a move based on the square selected.\n * @param  {number} move Number of the square selected in a move.\n * @return {number}      Column of the square selected in a move.\n */\nfunction calculateCol(move) {\n  let col = null;\n\n  switch (move) {\n    case 0:\n    case 3:\n    case 6:\n      col = 1;\n      break;\n    case 1:\n    case 4:\n    case 7:\n      col = 2;\n      break;\n    default:\n      col = 3;\n      break;\n  }\n\n  return col;\n}\n\n/**\n * Function that calculates the row of a move based on the square selected.\n * @param  {[type]} move Number of the square selected in a move.\n * @return {[type]}      Row of the square selected in a move.\n */\nfunction calculateRow(move) {\n  let row = null;\n\n  switch (move) {\n    case 0:\n    case 1:\n    case 2:\n      row = 1;\n      break;\n    case 3:\n    case 4:\n    case 5:\n      row = 2;\n      break;\n    default:\n      row = 3;\n      break;\n  }\n\n  return row;\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Header from \"../components/Header\";\nimport Board from \"../components/Board\";\nimport MoveList from \"../components/MoveList\";\n\n/**\n * [state description]\n * @type {Object}\n */\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      moves: Array(10).fill(null),\n      ascending: true\n    };\n    this.jumpTo = this.jumpTo.bind(this);\n    this.switchOrderList = this.switchOrderList.bind(this);\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const moves = this.state.moves.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    moves[this.state.stepNumber + 1] = i;\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      moves: moves\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  switchOrderList(order) {\n    this.setState({\n      ascending: !order\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const winnerLine = calculateWinnerLine(current.squares);\n    const moves = this.state.moves.slice();\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else if (this.state.stepNumber === 9) {\n      status = \"Draw \";\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-header\">\n          <Header status={status} />\n        </div>\n        <div className=\"game-board\">\n          <Board\n            winner={!winnerLine ? [] : winnerLine}\n            selected={moves[this.state.stepNumber]}\n            squares={current.squares}\n            onClick={i => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <MoveList\n            step={this.state.stepNumber}\n            moves={moves}\n            ascending={this.state.ascending}\n            jumpTo={this.jumpTo}\n            switchOrderList={this.switchOrderList}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  step: PropTypes.number,\n  moves: PropTypes.array,\n  ascending: PropTypes.bool,\n  jumpTo: PropTypes.number,\n  switchOrderList: PropTypes.bool\n};\n\n/**\n * [calculateWinner description]\n * @param  {[type]} squares [description]\n * @return {[type]}         [description]\n */\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n/**\n * [calculateWinnerLine description]\n * @param  {[type]} squares [description]\n * @return {[type]}         [description]\n */\nfunction calculateWinnerLine(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  let lineArr = [];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      lineArr = lineArr.concat(lines[i]);\n    }\n  }\n\n  return lineArr;\n}\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"../store/configureStore\";\nimport Game from \"../containers/Game\";\n\n/**\n * [store description]\n * @type {[type]}\n */\nconst store = configureStore();\n\n/**\n * [store description]\n * @type {Object}\n */\nexport default class Root extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Game />\n      </Provider>\n    );\n  }\n}\n","import \"babel-polyfill\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport Root from \"./components/Root\";\nimport \"./index.css\";\n\n/**\n * Index where the game is rendered\n */\nrender(<Root />, document.getElementById(\"root\"));\n"],"sourceRoot":""}